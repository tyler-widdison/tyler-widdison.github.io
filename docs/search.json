[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Resources",
    "section": "",
    "text": "Openvolley\nUseful R package when evaluating volleyball data.\nOpenvolley\n\n\n\n\nVolleyball data lab\n\nVideo series introducing the use of R with .dvw (volleyall scouted) files.\nVolleyball data lab"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Select Health providers\n\n\n\n\n\n\n\nMaps\n\n\nData gathering\n\n\nInformational\n\n\n\n\nData gathering, wrangling, visualizing with health providers\n\n\n\n\n\n\nJun 22, 2023\n\n\n\n\n\n\n  \n\n\n\n\nOlympicsDataverse\n\n\n\n\n\n\n\nOlympics\n\n\nData gathering\n\n\n\n\nA place for all things data via Olympic Sports\n\n\n\n\n\n\nMay 24, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Tyler Widdison",
    "section": "Experience",
    "text": "Experience\nData Analyst (2022-present)\nFamilySearch\n\nPerformance Data Analyst (2019-2023)\nUSA Beach Volleyball Teams\n\nOperations Data Analyst (2013-2019)\nHudl/Volleymetrics"
  },
  {
    "objectID": "posts/olympics_data_verse.html",
    "href": "posts/olympics_data_verse.html",
    "title": "OlympicsDataverse",
    "section": "",
    "text": "Inspiration coming from the https://github.com/sportsdataverse, I found there was no common place with Olympic data. After discovering some sports have public access to data I decided to start this organization with the intent of a data distribution knowledge base.\n\nSummer games\n\n\n\n\n\n\nSport\nSport (initial)\nBody\nSporting Body Webpage\nPackages or API\n\n\n\n\nArtistic Swimming\nSWA\nWAqua\nhttps://www.worldaquatics.com\nhttps://api.worldaquatics.com/fina/competitions/3085/events\n\n\nDiving\nDIV\nWAqua\nhttps://www.worldaquatics.com\nhttps://api.worldaquatics.com/fina/competitions/3085/events\n\n\nMarathon Swimming\nOWS\nWAqua\nhttps://www.worldaquatics.com\nhttps://api.worldaquatics.com/fina/competitions/3085/events\n\n\nSwimming\nSWM\nWAqua\nhttps://www.worldaquatics.com\nhttps://api.worldaquatics.com/fina/competitions/3085/events\n\n\nWater Polo\nWPO\nWAqua\nhttps://www.worldaquatics.com\nhttps://api.worldaquatics.com/fina/competitions/3085/events\n\n\n3x3 Basketball\nBK3\nFIBA\nhttps://www.fiba.basketball\nhttps://cm.fibaorganizer.com/static/docs/api/\n\n\nBasketball\nBKB\nFIBA\nhttps://www.fiba.basketball\nhttps://cm.fibaorganizer.com/static/docs/api/\n\n\nCanoe Sprint\nCSP\nICF\nhttps://www.canoeicf.com\nhttps://infoicf.msl.es/webICF/searcherOneSport?page=ZZS100R_@@@@@@@@@@@@@@@@@@@@@ENG\n\n\nCanoe Slalom\nCSL\nICF\nhttps://www.canoeicf.com\nhttps://infoicf.msl.es/webICF/searcherOneSport?page=ZZS100R_@@@@@@@@@@@@@@@@@@@@@ENG\n\n\nCycling BMX Freestyle\nBMF\nUCI\nhttps://www.uci.org\nhttps://www.uci.org/api/calendar/upcoming\n\n\nCycling BMX Racing\nBMX\nUCI\nhttps://www.uci.org\nhttps://www.uci.org/api/calendar/upcoming\n\n\nCycling Mountain Bike\nMTB\nUCI\nhttps://www.uci.org\nhttps://www.uci.org/api/calendar/upcoming\n\n\nCycling Road\nCRD\nUCI\nhttps://www.uci.org\nhttps://www.uci.org/api/calendar/upcoming\n\n\nCycling Track\nCTR\nUCI\nhttps://www.uci.org\nhttps://www.uci.org/api/calendar/upcoming\n\n\nArtistic Gymnastics\nGAR\nFIG\nhttps://www.gymnastics.sport\nhttps://www.gymnastics.sport/api/\n\n\nRhythmic Gymnastics\nGRY\nFIG\nhttps://www.gymnastics.sport\nhttps://www.gymnastics.sport/api/\n\n\nTrampoline Gymnastics\nGTR\nFIG\nhttps://www.gymnastics.sport\nhttps://www.gymnastics.sport/api/\n\n\nVolleyball - Beach\nVBV\nFIVB\nhttps://www.fivb.com\nhttps://www.fivb.org/VisSDK/VisWebService/#Introduction.html\n\n\nVolleyball - Indoor\nVVO\nFIVB\nhttps://www.fivb.com\nhttps://www.fivb.org/VisSDK/VisWebService/#Introduction.html\n\n\nEquestrian - Dressage\nEDR\nFEI\nhttps://www.fei.org\nhttps://inside.fei.org/fei/your-role/it-services/it-platforms/fei-database\n\n\nEquestrian - Eventing\nEVE\nFEI\nhttps://www.fei.org\nhttps://inside.fei.org/fei/your-role/it-services/it-platforms/fei-database\n\n\nEquestrian - Jumping\nEJP\nFEI\nhttps://www.fei.org\nhttps://inside.fei.org/fei/your-role/it-services/it-platforms/fei-database\n\n\nWrestling - Freestyle\nWRE\nUWW\nhttps://uww.org\nhttps://github.com/unitedworldwrestling\n\n\nWrestling - Greco-Roman\nWGR\nUWW\nhttps://uww.org\nhttps://github.com/unitedworldwrestling\n\n\nArchery\nARC\nWArch\nhttps://www.worldarchery.sport\nhttps://www.worldarchery.sport/api\n\n\nAthletics\nATH\nWAthle\nhttps://worldathletics.org\nNone found\n\n\nBadminton\nBDM\nBWF\nhttp://bwfbadminton.com\nhttps://extranet-lv.bwfbadminton.com/api\n\n\nBoxing\nBOX\nAIBA\nhttps://www.iba.sport\nNone found\n\n\nBreaking\nBKG\nWDSF\nhttps://www.worlddancesport.org\nhttps://services.worlddancesport.org/api/1\n\n\nFencing\nFEN\nFIE\nhttp://fie.org\nNone found\n\n\nField hockey\nHOC\nFIH\nhttps://www.fih.hockey\nNone found\n\n\nFootball\nFBL\nFIFA\nhttps://www.fifa.com\nhttps://futdb.app\n\n\nGolf\nGLF\nIGF\nhttps://www.igfgolf.org\nNone found\n\n\nHandball\nHBL\nIHF\nhttp://www.ihf.info\nNone found\n\n\nJudo\nJUD\nIJF\nhttps://www.ijf.org\nhttps://judobase.ijf.org/\n\n\nModern Pentathlon\nMPN\nUIPM\nhttps://www.uipmworld.org\nNone found\n\n\nRowing\nROW\nWRow\nhttps://worldrowing.com\nNone found\n\n\nRugby Sevens\nRU7\nWRug\nhttps://www.world.rugby\nhttps://github.com/pierre-lamarche/RugbyRanking\n\n\nSailing\nSAL\nWSail\nhttps://www.sailing.org/\nNone found\n\n\nShooting\nSHO\nISSF\nhttp://www.issf-sports.org/\nNone found\n\n\nSkateboarding\nSKB\nWSkate\nhttp://www.worldskate.org/\nNone found\n\n\nSport Climbing\nCLB\nIFSC\nhttp://www.ifsc-climbing.org/\nNone found\n\n\nSurfing\nSRF\nISA\nhttps://www.isasurf.org/\nNone found\n\n\nTable Tennis\nTTE\nITTF\nhttps://www.ittf.com/\nNone found\n\n\nTaekwondo\nTKW\nWT\nhttp://www.worldtaekwondo.org/\nNone found\n\n\nTennis\nTEN\nITF\nhttps://www.itftennis.com/en/\nNone found\n\n\nTriathlon\nTRI\nITU\nhttps://www.triathlon.org/\nhttps://github.com/tyler-widdison/rTriathlon\n\n\nTrampoline\nGTR\nFIG\nhttps://www.gymnastics.sport/site/\nNone found\n\n\nWeightlifting\nWLF\nIWF\nhttps://iwf.sport/\nNone found\n\n\n\n\n\n\n\n\n\nWinter games"
  },
  {
    "objectID": "posts/select health/select_health.html",
    "href": "posts/select health/select_health.html",
    "title": "Select Health providers",
    "section": "",
    "text": "SelectHealth offers medical and dental insurance plans in Utah, Idaho, and Nevada. This post’s goal is to build a interactive tool which can identify providers in a map using their machine readable data!\nData is gathered from https://selecthealth.org/machine-readable-data. Only gathering the ‘Providers’ data for this post. https://ebu.intermountainhealthcare.org/shprovider/exchange.providers.json.\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(readr)\nlibrary(jsonlite)\nlibrary(DT)\nlibrary(shiny)\nlibrary(shinyWidgets)\nlibrary(purrr)\nlibrary(leaflet)\n\n# Load data\nproviders &lt;- jsonlite::fromJSON(\"https://ebu.intermountainhealthcare.org/shprovider/exchange.providers.json\")\n\n# Wrangle data\ndata &lt;- providers %&gt;% \n    dplyr::mutate(addresses = purrr::map(addresses, as.data.frame),\n                  facility_type = purrr::map_chr(facility_type, ~ ifelse(length(.x) &gt; 0, purrr::pluck(.x, 1), NA)),\n                  plans = purrr::map(plans, as.data.frame),\n                  first_name = name$first,\n                  last_name = name$last\n    ) %&gt;% \n    tidyr::unnest(addresses, keep_empty = T) %&gt;% \n    tidyr::unnest(languages, keep_empty = T) %&gt;% \n    tidyr::unnest(specialty, keep_empty = T) %&gt;% \n    tidyr::unnest(plans, keep_empty = T) %&gt;% \n    tidyr::unnest(years, keep_empty = T) %&gt;% \n    dplyr::mutate(addresses = stringr::str_replace_all(address, \"&\", \",\"),\n                  addy = paste0(addresses, \", \", city, \", \", state)\n    )\n\nAfter reading the data the next step is to gather the longitude and latitude for map usage. I use the ggmap package. (geocoded_data was ran previously and takes a while to run)\n**NOTE:** ggmap requires some work in Google and registering your api. I will not go over that portion of this process. I originally attempted to use tidygeocoder, but found there is a HIPAA situation which prevented me from getting the correct longitude and latitude for specific facilities. I found using ggmap did not give me this error.\n\n# Get geocoordinates\n#addys &lt;- data %&gt;% \n#  dplyr::distinct(addy)\n\n# Obtain coordinates using ggmap\n#geocoded_data &lt;- addys %&gt;%\n#  ggmap::mutate_geocode(addy)\n#readr::write_csv(geocoded_data, \"geocoded_data.csv\")\ngeocoded_data &lt;- readr::read_csv(here::here(\"posts/select health/geocoded_data.csv\"))\n\nThen some additional data wrangling after obtaining all geocodes.\n\n# Join the coord with the providers data and wrangle furthur\ndf &lt;- data %&gt;% \n  dplyr::left_join(geocoded_data) %&gt;% \n  dplyr::filter(!grepl(\"^\\\\(\", addy)) %&gt;% \n  dplyr::distinct(facility_name, facility_type, type, addy, lon, lat, group_name, languages, gender, first_name, last_name, specialty, network_tier)\n\nReady for some mapping!\n\n# Create individual datasets for each type for the map\ngroup_data &lt;- df %&gt;% \n  dplyr::filter(type == 'GROUP') %&gt;% \n  janitor::remove_empty('cols') %&gt;% \n  dplyr::mutate(notes = paste0(group_name)) %&gt;% \n  dplyr::distinct(type, addy, lon, lat, group_name, notes)\n\nindiv_data &lt;- df %&gt;% \n  dplyr::filter(type == 'INDIVIDUAL') %&gt;% \n  janitor::remove_empty('cols') %&gt;% \n  dplyr::mutate(name = paste0(first_name, ' ', last_name),\n                notes = paste0(gender, \" - \", name, \" - \", languages, \" - \", specialty)) %&gt;% \n  dplyr::distinct(type, addy, lon, lat, languages, gender, name, specialty, notes)\n\nfacility_data &lt;- df %&gt;% \n  dplyr::filter(type == 'FACILITY') %&gt;% \n  janitor::remove_empty('cols') %&gt;% \n  dplyr::mutate(notes = paste0(facility_name)) %&gt;% \n  dplyr::distinct(facility_name, facility_type, type, addy, lon, lat, notes)\n\n\nAll types\nNow lets do some mapping with all types!\n\n# map!\nleaflet() %&gt;%\n  leaflet::setView(lng = -111.349309, lat = 41.648323, zoom = 4) %&gt;% \n  leaflet::addTiles() %&gt;% \n  leaflet::addCircleMarkers(popup = group_data$notes, clusterOptions = leaflet::markerClusterOptions(), lng = group_data$lon, lat = group_data$lat, group = \"Group\", color = \"red\") %&gt;%\n  leaflet::addCircleMarkers(popup = facility_data$notes, clusterOptions = leaflet::markerClusterOptions(), lng = facility_data$lon, lat = facility_data$lat, group = \"Facility\", color = \"#F1CC6E\") %&gt;%\n  leaflet::addCircleMarkers(popup = indiv_data$notes, clusterOptions = leaflet::markerClusterOptions(), lng = indiv_data$lon, lat = indiv_data$lat, group = \"Individual\", color = \"#66B0B1\") %&gt;%\n  leaflet::addLegend(values = 'Group', group = \"Group\", position = \"bottomleft\", labels = \"Group\", colors = \"red\") %&gt;%\n  leaflet::addLegend(values = 'Facility', group = \"Facility\", position = \"bottomleft\", labels = \"Facility\", colors = \"#F1CC6E\") %&gt;%\n  leaflet::addLegend(values = 'Individual', group = \"Individual\", position = \"bottomleft\", labels = \"Individual\", colors = \"#66B0B1\") %&gt;%\n  leaflet::addLayersControl(overlayGroups = c(\"Group\", \"Facility\", 'Individual'),\n                   options = leaflet::layersControlOptions(collapsed = FALSE)) \n\n\n\n\n\n\nThis is a relatively simple example of how to gather and visualize public data.\n\n\n\nIndividual providers map exploration\nAdding a bit of shiny and restrictiveness to the map can quickly return specific providers. Let’s add a table as well for additional context.\n\n\n\nGender\n\nFemale\nMale\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdditional data\nThis is a great resource for additional provider data outside of the select health network:\nhttps://github.com/bayesimpact/encompass/blob/a4f47e384ef4fe4dc43c30423a1713c2c93dc87f/data/healthcare_gov/Machine_Readable_URL_PUF.csv#L272"
  }
]